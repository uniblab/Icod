<?xml version="1.0" encoding="utf-8" ?>
<!-- 
    Icod.dll is the Icod utility .Net assembly.
    Copyright (C) 2025  Timothy J. Bruce

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
    USA
-->
<types>

	<type name="System.IDisposable">
		<member name="Dispose">
			<summary>Releases unmanaged locking objects.</summary>
			<remarks>
				Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
			</remarks>
		</member>
		<member name="Dispose(System.Boolean)">
			<summary>
				Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
			</summary>
			<param name="disposing">
				If disposing is <see langword="true" />, the method has been called directly or indirectly by a user's code.
				Managed and unmanaged resources can be disposed.
				If disposing is <see langword="false" />, the method has been called by the runtime from inside the finalizer
				and you should not reference other objects.
				Only unmanaged resources can be disposed.
			</param>
			<remarks>
				Releases all locks.  Behavior at this point is undefined.
			</remarks>
		</member>

	</type>

	<type name="Icod.ICloneable`1">
		<member name="">
			<summary>
				Supports cloning, which creates a new instance of a class with the same value as an existing instance.
			</summary>
		</member>
		<member name="Clone">
			<summary>
				Creates a new object that is a copy of the current instance.
			</summary>
			<returns>
				A copy of the current instance strongly typed as <typeparamref name="T" />
			</returns>
		</member>
	</type>

	<type name="Icod.IAsyncResult">
		<member name="">
			<summary>
				Represents the status of an asynchronous operation.
			</summary>
			<typeparam name="R">
				The Result of the the asynchronous operation.
			</typeparam>
		</member>
		<member name="Result">
			<summary>
				Gets the ultimate result of the asynchronous operation.
			</summary>
			<returns>
				A user-defined object that qualifies or contains the result of the asynchronous operation.
			</returns>
		</member>
	</type>

	<type name="Icod.Attribute">
		<member name="">
			<summary>The root type for all Icod-base framework attributes.</summary>
		</member>
		<member name="#ctor">
			<summary>
				Creates a new instance of an <see cref="T:Icod.Attribute">Icod.Attribute</see>.
			</summary>
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
	</type>

	<type name="Icod.Pair`2">
		<member name="">
			<summary>
				An immutable reference type to conveniently hold two values of c and <typeparamref name="TSecond" />.
			</summary>
		</member>
		<member name="#sctor">
			<summary>Initializes static values.</summary>
		</member>
		<member name="#ctor">
			<summary>Sets the instance's initial values.</summary>
		</member>
		<member name="#ctor(`0,`1)">
			<summary>Sets the instance's values.</summary>
			<param name="first">
				A value of type <typeparamref name="TFirst" /> to associate with the first value.
			</param>
			<param name="second">
				A value of type <typeparamref name="TSecond" /> to associate with the second value.
			</param>
		</member>
		<member name="First">
			<summary>The first value.</summary>
			<returns>The first value.</returns>
		</member>
		<member name="Second">
			<summary>The second value.</summary>
			<returns>The second value.</returns>
		</member>
		<member name="GetHashCode">
			<summary>Returns the hash code of the current instance.</summary>
			<returns>A hash code for the current instance.</returns>
			<seealso cref="M:System.Object.GetHashCode" />
			<seealso cref="T:System.Int32" />
		</member>
	</type>
	<type name="Icod.Pair`1">
		<member name="">
			<summary>
				An immutable reference type to conveniently hold two values of <typeparamref name="T" />.
			</summary>
		</member>
		<member name="#ctor(`0,`1)">
			<summary>Sets the instance's values.</summary>
			<param name="first">
				A value of type <typeparamref name="T" /> to associate with the first value.
			</param>
			<param name="second">
				A value of type <typeparamref name="T" /> to associate with the second value.
			</param>
		</member>
	</type>
	<type name="Icod.Pair">
		<member name="">
			<summary>
				An immutable reference type to conveniently hold two values.
			</summary>
		</member>
		<member name="#ctor(System.Object,System.Object)">
			<summary>Sets the instance's values.</summary>
			<param name="first">
				A value to associate with the first value.
			</param>
			<param name="second">
				A value associate with the second value.
			</param>
		</member>
	</type>

	<type name="Icod.Triplet`3">
		<member name="">
			<summary>
				An immutable reference type to conveniently hold three values of <typeparamref name="TFirst" />, <typeparamref name="TSecond" />, and <typeparamref name="TThird" />.
			</summary>
		</member>
		<member name="#ctor(`0,`1,`2)">
			<summary>Sets the instance's values.</summary>
			<param name="first">
				A value of type <typeparamref name="TFirst" /> to associate with the first value.
			</param>
			<param name="second">
				A value of type <typeparamref name="TSecond" /> to associate with the second value.
			</param>
			<param name="third">
				A value of type <typeparamref name="TThird" /> to associate with the third value.
			</param>
		</member>
		<member name="Third">
			<summary>The third value.</summary>
			<returns>The third value.</returns>
		</member>
	</type>
	<type name="Icod.Triplet`1">
		<member name="">
			<summary>
				An immutable reference type to conveniently hold three values of <typeparamref name="T" />.
			</summary>
		</member>
		<member name="#ctor(`0,`1,`2)">
			<summary>Sets the instance's values.</summary>
			<param name="first">
				A value of type <typeparamref name="T" /> to associate with the first value.
			</param>
			<param name="second">
				A value of type <typeparamref name="T" /> to associate with the second value.
			</param>
			<param name="third">
				A value of type <typeparamref name="T" /> to associate with the third value.
			</param>
		</member>
	</type>
	<type name="Icod.Triplet">
		<member name="">
			<summary>
				An immutable reference type to conveniently hold three values.
			</summary>
		</member>
		<member name="#ctor(System.Object,System.Object,System.Object)">
			<summary>Sets the instance's values.</summary>
			<param name="first">
				A value to associate with the first value.
			</param>
			<param name="second">
				A value associate with the second value.
			</param>
			<param name="third">
				A value associate with the third value.
			</param>
		</member>
	</type>

	<type name="Icod.AuthorAttribute">
		<member name="">
			<summary>Indicates the authorship of a body of work.</summary>
			<seealso cref="T:Icod.Attribute" />
		</member>
		<member name="#ctor(System.String)">
			<summary>
				Constructs a new instance using <paramref name="name" /> as the author.
			</summary>
			<param name="name">The name of the author, or authors, responsible for the body to which this attribute is applied.</param>
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
		<member name="Name">
			<summary>
				The author of a body of work.
			</summary>
			<remarks>
				The author of a body of work is not required to be an individual in most countries.
				In many nations, collective authorship is permissible, and is faciliated by partnerships, corporations, trusts, ect.
			</remarks>
		</member>
		<member name="ToString">
			<returns>
				The value of the <see cref="Icod.AuthorAttribute.Name">Name</see> property.
			</returns>
		</member>
	</type>
	<type name="Icod.ReportBugsToAttribute">
		<member name="">
			<summary>Primary bug-reporting contact for a body of work.</summary>
			<seealso cref="T:Icod.Attribute" />
		</member>
		<member name="#ctor(System.String)">
			<summary>
				Initializes a new instance of the ReportBugsToAttribute class with the specified URI, <paramref name="uri" />.
			</summary>
			<param name="uri">
				A URI.
			</param>
			<remarks>
				Identical to invoking <see cref="M:Icod.ReportBugsToAttribute.#ctor(System.Uri)">
					new Icod.ReportBugsToAttribute( new System.Uri( <paramref name="uri" /> )
				</see>
			</remarks>
			<seealso cref="M:Icod.ReportBugsToAttribute.#ctor(System.Uri)" />
			<exception cref="T:System.UriFormatException">
				<list type="bullet">
					<listheader>
						<item>
							<description>
								Thrown when any of the following conditions are true:
							</description>
						</item>
					</listheader>
					<item>
						<description>
							uriString is empty.
						</description>
					</item>
					<item>
						<description>
							The scheme specified in uriString is not correctly formed. See CheckSchemeName.
						</description>
					</item>
					<item>
						<description>
							uriString contains too many slashes.
						</description>
					</item>
					<item>
						<description>
							The password specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The host name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The file name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The user name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The host or authority name specified in uriString cannot be terminated by backslashes.
						</description>
					</item>
					<item>
						<description>
							The port number specified in uriString is not valid or cannot be parsed.
						</description>
					</item>
					<item>
						<description>
							The length of uriString exceeds 65534 characters.
						</description>
					</item>
					<item>
						<description>
							The length of the scheme specified in uriString exceeds 1023 characters.
						</description>
					</item>
					<item>
						<description>
							There is an invalid character sequence in uriString.
						</description>
					</item>
					<item>
						<description>
							The MS-DOS path specified in uriString must start with c:\\.
						</description>
					</item>
				</list>
			</exception>
		</member>
		<member name="#ctor(System.Uri)">
			<summary>
				Initializes a new instance of the ReportBugsToAttribute class with the specified URI.
			</summary>
			<param name="uri">
				A URI.
			</param>
			<remarks>
				This constructor creates a Uri instance from a URI <see cref="T:System.String">System.String</see>. It parses the URI, puts it in canonical format, and makes any required escape encodings.
				This constructor does not ensure the Uri refers to an accessible resource.
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Thrown when <paramref name="uri" />is a null reference.
			</exception>
			<exception cref="T:System.UriFormatException">
				<list type="bullet">
					<listheader>
						<item>
							<description>
								Thrown when any of the following conditions are true:
							</description>
						</item>
					</listheader>
					<item>
						<description>
							uriString is empty.
						</description>
					</item>
					<item>
						<description>
							The scheme specified in uriString is not correctly formed. See CheckSchemeName.
						</description>
					</item>
					<item>
						<description>
							uriString contains too many slashes.
						</description>
					</item>
					<item>
						<description>
							The password specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The host name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The file name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The user name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The host or authority name specified in uriString cannot be terminated by backslashes.
						</description>
					</item>
					<item>
						<description>
							The port number specified in uriString is not valid or cannot be parsed.
						</description>
					</item>
					<item>
						<description>
							The length of uriString exceeds 65534 characters.
						</description>
					</item>
					<item>
						<description>
							The length of the scheme specified in uriString exceeds 1023 characters.
						</description>
					</item>
					<item>
						<description>
							There is an invalid character sequence in uriString.
						</description>
					</item>
					<item>
						<description>
							The MS-DOS path specified in uriString must start with c:\\.
						</description>
					</item>
				</list>
			</exception>
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
		<member name="Uri">
			<summary>
				The address for the principal bug contact, usually an email address.
			</summary>
			<value>
				The address for the principal bug contact.
				It is not required to be an email address, and might very well be the web page address of a contact form,
				or bulletin board system,
				or even a newsgroup.
			</value>
		</member>
		<member name="ToString">
			<returns>
				The value of the <see cref="Icod.ReportBugsToAttribute.Uri">Uri</see> property.
			</returns>
		</member>
	</type>

	<type name="Icod.LicenseAttribute">
		<member name="">
			<summary>Indicates the assembly, type, or member to which this attribute is attached is governed by said license</summary>
			<remarks>
				Licenses, unless explicitly proscribed, are transitive.
				A license applied to a type transitively applies to all her members unless specifically overridden with a new license.
				Many authors may find it easiest to deal with different licensure requires via the C# ``partial'' keyword,
				allowing them to create one source file for all the aspects which are governed by one license,
				and another file for another license, and so on.
			</remarks>
			<example>
				Specifying multiple licenses:
				<code>
					[Icod.LgplLicense]
					public class Foo {

					public Foo() {
					// covered by the LGPL
					}

					[Icod.GplLicense]
					public void SomeComplexMethodAlreadyAvailableViaGpl() {
					// that function/routine here, covered by the GPL
					}

					public System.Int32 SomeOtherFunction( Systm.Boolean input ) {
					// this is covered by the LGPL
					}

					protected class Bar {
					// this nested class is also covered by the LGPL
					//  unless she, or her members,
					//  specifically override the license.
					}

					}
				</code>
			</example>
			<seealso cref="T:Icod.Attribute" />
		</member>
		<member name="#ctor(System.String)">
			<summary>Applies a license, such as the GPL for example, to a body of work.</summary>
			<param name="theLicense">
				Specifies the license to apply, and sets the <see cref="T:Icod.LicenseAttribute.License">License</see> property.
			</param>
			<remarks>
				Constructs a new instance and sets the sets the <see cref="Icod.LicenseAttribute.License">License</see> property to the value specified by <paramref name="theLicense" />.
			</remarks>
			<seealso cref="M:Icod.LicenseAttribute#ctor" />
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
		<member name="License">
			<summary>
				The license applied, such as the GPL for example, to a body of work.
			</summary>
			<value>
				The full and complete text of the license which is to apply to the work this attribute is attached.
			</value>
		</member>
		<member name="ToString">
			<returns>The license applied.</returns>
		</member>
	</type>
	<type name="Icod.LgplLicenseAttribute">
		<member name="">
			<summary>Applies the LGPL to a body of work.</summary>
			<seealso cref="T:Icod.LicenseAttribute" />
		</member>
		<member name="#ctor">
			<summary>Creates a new instance of the GNU Lesser General Public License for appliance to a body of work.</summary>
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
	</type>
	<type name="Icod.GplLicenseAttribute">
		<member name="">
			<summary>Applies the GPL to a body of work.</summary>
			<seealso cref="T:Icod.LicenseAttribute" />
		</member>
		<member name="#ctor">
			<summary>Creates a new instance of the GNU General Public License for appliance to a body of work.</summary>
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
	</type>

	<type name="Icod.AsyncResult">
		<member name="">
			<summary>Represents the status of an asynchronous operation.</summary>
		</member>
		<member name="#ctor(System.AsyncCallback,System.Object)">
			<summary>
				Creates a new instance of an AsyncResult object.
			</summary>
			<param name="callback">
				The user-defined <see cref="System.AsyncCallback">System.AsyncCallback</see> to invoke when the operation completes.
			</param>
			<param name="asyncState">
				The user-defined object that qualifies or contains information about an asynchronous operation.
			</param>
		</member>
		<member name="AsyncState">
			<summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
			<value>A user-defined object that qualifies or contains information about an asynchronous operation.</value>
		</member>
		<member name="AsyncWaitHandle">
			<summary>
				Gets a <see cref="T:System.Threading.WaitHandle">WaitHandle</see> that is used to wait for an asynchronous operation to complete.
			</summary>
			<value>
				A <see cref="T:System.Threading.WaitHandle">WaitHandle</see> that is used to wait for an asynchronous operation to complete.
			</value>
		</member>
		<member name="CompletedSynchronously">
			<summary>Gets an indication of whether the asynchronous operation completed synchronously.</summary>
			<value>
				<see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.
			</value>
			<remarks>This property is usually <see langword="false" />.</remarks>
		</member>
		<member name="IsCompleted">
			<summary>
				Gets an indication whether the asynchronous operation has completed.
			</summary>
			<value>
				<see langword="true" /> if the operation is complete; otherwise, <see langword="false" />.
			</value>
		</member>
		<member name="SetCompletedSynchronously(System.Boolean)">
			<summary>
				Used to set the <see cref="P:Icod.AsyncResult.CompletedSynchronously">CompletedSynchronously</see> property.
			</summary>
			<remarks>If the asynchronous invocation completes before the BeginXxx method completes, this method is used to indicate synchronous completion.</remarks>
		</member>
		<member name="SetCompletion(System.Boolean,System.Exception)">
			<summary>
				Used to set the AsyncResult object's completion state and throw any exceptions which may have been generated during the request.
			</summary>
			<param name="completedSynchronously">
				<see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.
			</param>
			<param name="completionException">
				<see langword="null" /> if no exceptions were raised during the asynchronous request; otherwise a <see cref="T:System.Exception">System.Exception</see>.
			</param>
		</member>
		<member name="EndInvoke">
			<summary>Waits for the pending asynchronous read to complete.</summary>
		</member>
	</type>
	<type name="Icod.AsyncResult`1">
		<member name="">
			<summary>
				Represents the status of an asynchronous operation.
			</summary>
		</member>
		<member name="#ctor(System.AsyncCallback,System.Object)">
			<summary>
				Creates a new instance of the generic AsyncResult.
			</summary>
		</member>
		<member name="SetCompletion(`0,System.Boolean,System.Exception)">
			<summary>
				Used to set the AsyncResult object's completion state, throw any exceptions which may have been generated during the request, and report the <paramref name="result" /> of the operation.
			</summary>
			<param name="result">
				The results of the asynchronous operation.
			</param>
			<param name="completedSynchronously">
				<see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.
			</param>
			<param name="completionException">
				<see langword="null" /> if no exceptions were raised during the asynchronous request; otherwise a <see cref="T:System.Exception">System.Exception</see>.
			</param>
		</member>
		<member name="EndInvoke">
			<summary>
				Waits for the pending asynchronous read to complete.
			</summary>
			<returns>
				The results, <typeparamref name="R" />, of the operation.
			</returns>
		</member>
	</type>

	<type name="Icod.IEnumerableByPredicate`1">
	</type>
	<type name="Icod.EnumeratorByPredicate`1">
	</type>

	<type name="Icod.ChainedDisposer">
		<member name="">
			<summary>
				Concatenates a pair of disposable objects into a single disposable object.
			</summary>
		</member>
		<member name="#ctor(System.IDisposable,System.IDisposable)">
			<summary>
				Creates a new reference to a concatenated pair of disposable objects.
			</summary>
			<param name="outer">
				The first object to be disposed.
			</param>
			<param name="inner">
				The second object to be disposed.
			</param>
		</member>
		<member name="#dtor">
			<summary>
				Allows the object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
			</summary>
		</member>
	</type>

</types>