<?xml version="1.0" encoding="utf-8" ?>
<!-- 
	Copyright (c) 2025 Timothy J. ``Flytrap'' Bruce of the Icod.

    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.2
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".
-->
<types>

	<type name="Icod.Exception">
		<member name="">
			<summary>The root type for all Icod-based framework exceptions.</summary>
			<seealso cref="T:System.ApplicationException"/>
			<seealso>Partition I of the CLI Specification</seealso>
			<threadsafety static="true" instance="false" />
			<remarks>
				This class is the base class for all ICOD Exceptions.  
				When an error occurs the library reports it by throwing an <c>Icod.Exception</c> (or one of her derived types) containing information about the error. 
			</remarks>
		</member>
		<member name="#ctor">
			<summary>
				Constructs and initializes a new instance of the <see cref="T:Icod.Exception">Icod.Exception</see> class.
			</summary>
			<remarks>
				This constructor initializes the <see cref="P:Icod.Exception.Message">Icod.Exception.Message</see> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.
				The <see cref="P:Icod.Exception.InnerException">Icod.Exception.InnerException</see> property is initialized to <see langword="null" /> and the 
				<see cref="P:Icod.Exception.StackTrace">Icod.Exception.StackTrace</see> property is initialized to <see cref="F:System.String.Empty">System.String.Empty</see>.
			</remarks>
			<seealso cref="M:System.ApplicationException#ctor" />
		</member>
		<member name="#ctor(System.String)">
			<summary>
				Constructs and initializes a new instance of the <see cref="T:Icod.Exception">Icod.Exception</see> class.
			</summary>
			<param name='message'>
				A <see cref="T:System.String">System.String</see> that describes the error.
				The content of message is intended to be understood by humans.
				The caller of this constructor is required to ensure that this string has been localized for the current system culture.
			</param>
			<remarks>
				<param>
					This constructor initializes the <see cref="P:Icod.Exception.Message">Icod.Exception.Message</see> property of the new instance using <paramref name="message" />.
					If <paramref name="message" /> is null, the <see cref="P:Icod.Exception.Message">Icod.Exception.Message</see> property is initialized to the system-supplied message provided by the <see cref="M:Icod.Exception#ctor">constructor</see> that takes no arguments.
					The <see cref="P:Icod.Exception.InnerException">Icod.Exception.InnerException</see> property is initialized to null and the <see cref="P:Icod.Exception.StackTrace">Icod.Exception.StackTrace</see> property is initialized to <see cref="F:System.String.Empty">System.String.Empty</see>.
				</param>
				<param>
					Identical to invoking <c>new Icod.Exception( <paramref name="message" />, null )</c>.
				</param>
			</remarks>
			<seealso cref="M:System.ApplicationException#ctor(System.String)" />
		</member>
		<member name="#ctor(System.String,System.Exception)">
			<summary>
				Constructs and initializes a new instance of the <see cref="T:Icod.Exception">Icod.Exception</see> class.
			</summary>
			<param name='message'>
				A <see cref="T:System.String">System.String</see> that describes the error.  
				The content of message is intended to be understood by humans.  
				The caller of this constructor is required to ensure that this string has been localized for the current system culture.  
			</param>
			<param name="innerException">
				The underlying <see cref="T:System.Exception">exception</see> which triggered this exception's generation.  
			</param>
			<seealso cref="M:System.ApplicationException#ctor(System.String,System.Exception)" />
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
	</type>

	<type name="Icod.Attribute">
		<member name="">
			<summary>The root type for all Icod-base framework attributes.</summary>
		</member>
		<member name="#ctor">
			<summary>Creates a new instance of an <see cref="T:Icod.Attribute">Icod.Attribute</see>.</summary>
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
	</type>

	<type name="Icod.AuthorAttribute">
		<member name="">
			<summary>Indicates the authorship of a body of work.</summary>
			<seealso cref="T:Icod.Attribute" />
		</member>
		<member name="#ctor(System.String)">
			<summary>
				Constructs a new instance using <paramref name="name" /> as the author.
			</summary>
			<param name="name">The name of the author, or authors, responsible for the body to which this attribute is applied.</param>
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
		<member name="Name">
			<summary>
				The author of a body of work.
			</summary>
			<remarks>
				The author of a body of work is not required to be an individual in most countries.
				In many nations, collective authorship is permissible, and is faciliated by partnerships, corporations, trusts, ect.
			</remarks>
		</member>
		<member name="ToString">
			<returns>
				The value of the <see cref="Icod.AuthorAttribute.Name">Name</see> property.
			</returns>
		</member>
	</type>
	<type name="Icod.ReportBugsToAttribute">
		<member name="">
			<summary>Primary bug-reporting contact for a body of work.</summary>
			<seealso cref="T:Icod.Attribute" />
		</member>
		<member name="#ctor(System.String)">
			<summary>
				Initializes a new instance of the ReportBugsToAttribute class with the specified URI, <paramref name="uri" />.
			</summary>
			<param name="uri">
				A URI.
			</param>
			<remarks>Identical to invoking <see cref="M:Icod.ReportBugsToAttribute.#ctor(System.Uri)">new Icod.ReportBugsToAttribute( new System.Uri( <paramref name="uri" /> )</see></remarks>
			<seealso cref="M:Icod.ReportBugsToAttribute.#ctor(System.Uri)" />
			<exception cref="T:System.UriFormatException">
				<list type="bullet">
					<listheader>
						<item>
							<description>
								Thrown when any of the following conditions are true:
							</description>
						</item>
					</listheader>
					<item>
						<description>
							uriString is empty.
						</description>
					</item>
					<item>
						<description>
							The scheme specified in uriString is not correctly formed. See CheckSchemeName.
						</description>
					</item>
					<item>
						<description>
							uriString contains too many slashes.
						</description>
					</item>
					<item>
						<description>
							The password specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The host name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The file name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The user name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The host or authority name specified in uriString cannot be terminated by backslashes.
						</description>
					</item>
					<item>
						<description>
							The port number specified in uriString is not valid or cannot be parsed.
						</description>
					</item>
					<item>
						<description>
							The length of uriString exceeds 65534 characters.
						</description>
					</item>
					<item>
						<description>
							The length of the scheme specified in uriString exceeds 1023 characters.
						</description>
					</item>
					<item>
						<description>
							There is an invalid character sequence in uriString.
						</description>
					</item>
					<item>
						<description>
							The MS-DOS path specified in uriString must start with c:\\.
						</description>
					</item>
				</list>
			</exception>
		</member>
		<member name="#ctor(System.Uri)">
			<summary>
				Initializes a new instance of the ReportBugsToAttribute class with the specified URI.
			</summary>
			<param name="uri">
				A URI.
			</param>
			<remarks>
				This constructor creates a Uri instance from a URI <see cref="T:System.String">System.String</see>. It parses the URI, puts it in canonical format, and makes any required escape encodings.
				This constructor does not ensure the Uri refers to an accessible resource.
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Thrown when <paramref name="uri" />is a null reference.
			</exception>
			<exception cref="T:System.UriFormatException">
				<list type="bullet">
					<listheader>
						<item>
							<description>
								Thrown when any of the following conditions are true:
							</description>
						</item>
					</listheader>
					<item>
						<description>
							uriString is empty.
						</description>
					</item>
					<item>
						<description>
							The scheme specified in uriString is not correctly formed. See CheckSchemeName.
						</description>
					</item>
					<item>
						<description>
							uriString contains too many slashes.
						</description>
					</item>
					<item>
						<description>
							The password specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The host name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The file name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The user name specified in uriString is not valid.
						</description>
					</item>
					<item>
						<description>
							The host or authority name specified in uriString cannot be terminated by backslashes.
						</description>
					</item>
					<item>
						<description>
							The port number specified in uriString is not valid or cannot be parsed.
						</description>
					</item>
					<item>
						<description>
							The length of uriString exceeds 65534 characters.
						</description>
					</item>
					<item>
						<description>
							The length of the scheme specified in uriString exceeds 1023 characters.
						</description>
					</item>
					<item>
						<description>
							There is an invalid character sequence in uriString.
						</description>
					</item>
					<item>
						<description>
							The MS-DOS path specified in uriString must start with c:\\.
						</description>
					</item>
				</list>
			</exception>
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
		<member name="Uri">
			<summary>
				The address for the principal bug contact, usually an email address.
			</summary>
			<value>
				The address for the principal bug contact.
				It is not required to be an email address, and might very well be the web page address of a contact form,
				or bulletin board system,
				or even a newsgroup.
			</value>
		</member>
		<member name="ToString">
			<returns>
				The value of the <see cref="Icod.ReportBugsToAttribute.Uri">Uri</see> property.
			</returns>
		</member>
	</type>

	<type name="Icod.LicenseAttribute">
		<member name="">
			<summary>Indicates the assembly, type, or member to which this attribute is attached is governed by said license</summary>
			<remarks>
				Licenses, unless explicitly proscribed, are transitive.  
				A license applied to a type transitively applies to all her members unless specifically overridden with a new license.  
				Many authors may find it easiest to deal with different licensure requires via the C# ``partial'' keyword, 
				allowing them to create one source file for all the aspects which are governed by one license, 
				and another file for another license, and so on.  
			</remarks>
			<example>
				Specifying multiple licenses:
				<code>
[Icod.LgplLicense]
public class Foo { 

	public Foo() { 
		// covered by the LGPL
	}

	[Icod.GplLicense]
	public void SomeComplexMethodAlreadyAvailableViaGpl() { 
		// that function/routine here, covered by the GPL
	}

	public System.Int32 SomeOtherFunction( Systm.Boolean input ) { 
		// this is covered by the LGPL
	}

	protected class Bar { 
		// this nested class is also covered by the LGPL
		//  unless she, or her members, 
		//  specifically override the license.
	}

}
				</code>
			</example>
			<seealso cref="T:Icod.Attribute" />
		</member>
		<member name="#ctor(System.String)">
			<summary>Applies a license, such as the GPL for example, to a body of work.</summary>
			<param name="theLicense">
				Specifies the license to apply, and sets the <see cref="T:Icod.LicenseAttribute.License">License</see> property.
			</param>
			<remarks>
				Constructs a new instance and sets the sets the <see cref="Icod.LicenseAttribute.License">License</see> property to the value specified by <paramref name="theLicense" />.
			</remarks>
			<seealso cref="M:Icod.LicenseAttribute#ctor" />
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
		<member name="License">
			<summary>
				The license applied, such as the GPL for example, to a body of work.
			</summary>
			<value>
				The full and complete text of the license which is to apply to the work this attribute is attached.
			</value>
		</member>
		<member name="ToString">
			<returns>The license applied.</returns>
		</member>
	</type>
	<type name="Icod.LgplLicenseAttribute">
		<member name="">
			<summary>Applies the LGPL to a body of work.</summary>
			<seealso cref="T:Icod.LicenseAttribute" />
		</member>
		<member name="#ctor">
			<summary>Creates a new instance of the GNU Lesser General Public License for appliance to a body of work.</summary>
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
	</type>
	<type name="Icod.GplLicenseAttribute">
		<member name="">
			<summary>Applies the GPL to a body of work.</summary>
			<seealso cref="T:Icod.LicenseAttribute" />
		</member>
		<member name="#ctor">
			<summary>Creates a new instance of the GNU General Public License for appliance to a body of work.</summary>
		</member>
		<member name="#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Constructs a new instance from a serialized source.
			</summary>
			<param name="info">
				The serialized values to retreive.
			</param>
			<param name="sc">
				Contextual or formatting information about said values.
			</param>
			<remarks>
				Used for serialization only.
			</remarks>
		</member>
		<member name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>
				Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with the data needed to serialize the target object.
			</summary>
			<param name="info">
				The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> to populate with data.
			</param>
			<param name="context">
				The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
			</param>
			<remarks>
				Any objects that are included in the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> are automatically tracked and serialized by the formatter.
			</remarks>
		</member>
	</type>

	<type name="Icod.AsyncResult">
		<member name="">
			<summary>Represents the status of an asynchronous operation.</summary>
		</member>
		<member name="#ctor(System.AsyncCallback,System.Object)">
			<summary>
				Creates a new instance of an AsyncResult object.
			</summary>
			<param name="callback">
				The user-defined <see cref="System.AsyncCallback">System.AsyncCallback</see> to invoke when the operation completes.
			</param>
			<param name="asyncState">
				The user-defined object that qualifies or contains information about an asynchronous operation.
			</param>
		</member>
		<member name="AsyncState">
			<summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
			<value>A user-defined object that qualifies or contains information about an asynchronous operation.</value>
		</member>
		<member name="AsyncWaitHandle">
			<summary>
				Gets a <see cref="T:System.Threading.WaitHandle">WaitHandle</see> that is used to wait for an asynchronous operation to complete.
			</summary>
			<value>
				A <see cref="T:System.Threading.WaitHandle">WaitHandle</see> that is used to wait for an asynchronous operation to complete.
			</value>
		</member>
		<member name="CompletedSynchronously">
			<summary>Gets an indication of whether the asynchronous operation completed synchronously.</summary>
			<value>
				<see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.
			</value>
			<remarks>This property is usually false.</remarks>
		</member>
		<member name="IsCompleted">
			<summary>
				Gets an indication whether the asynchronous operation has completed.
			</summary>
			<value>
				<see langword="true" /> if the operation is complete; otherwise, <see langword="false" />.
			</value>
		</member>
		<member name="SetCompletedSynchronously(System.Boolean)">
			<summary>
				Used to set the <see cref="P:Icod.AsyncResult.CompletedSynchronously">CompletedSynchronously</see> property.
			</summary>
			<remarks>If the asynchronous invocation completes before the BeginXxx method completes, this method is used to indicate synchronous completion.</remarks>
		</member>
		<member name="SetCompletion(System.Boolean,System.Exception)">
			<summary>
				Used to set the AsyncResult object's completion state and throw any exceptions which may have been generated during the request.
			</summary>
			<param name="completedSynchronously">
				<see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.
			</param>
			<param name="completionException">
				<see langword="null" /> if no exceptions were raised during the asynchronous request; otherwise a <see cref="T:System.Exception">System.Exception</see>.
			</param>
		</member>
		<member name="EndInvoke">
			<summary>Waits for the pending asynchronous read to complete.</summary>
		</member>
	</type>
	<type name="Icod.AsyncResult`1">
		<member name="">
			<summary>
				Represents the status of an asynchronous operation.
			</summary>
		</member>
		<member name="#ctor(System.AsyncCallback,System.Object)">
			<summary>
				Creates a new instance of the generic AsyncResult.
			</summary>
		</member>
		<member name="SetCompletion(`0,System.Boolean,System.Exception)">
			<summary>
				Used to set the AsyncResult object's completion state, throw any exceptions which may have been generated during the request, and report the <paramref name="result" /> of the operation.
			</summary>
			<param name="result">
				The results of the asynchronous operation.
			</param>
			<param name="completedSynchronously">
				<see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.
			</param>
			<param name="completionException">
				<see langword="null" /> if no exceptions were raised during the asynchronous request; otherwise a <see cref="T:System.Exception">System.Exception</see>.
			</param>
		</member>
		<member name="EndInvoke">
			<summary>
				Waits for the pending asynchronous read to complete.
			</summary>
			<returns>
				The results, <typeparamref name="R" />, of the operation.
			</returns>
		</member>
	</type>

	<type name="Icod.IEnumerableByPredicate`1">
	</type>
	<type name="Icod.EnumeratorByPredicate`1">
	</type>

</types>